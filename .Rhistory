plot(mod1)
raw.fin
raw.fun
raw.fun<-paste(
root.url,
'5086859/raw/17fd6d2adec4dbcf5ce750cbd1f3e0f4be9d8b19/nnet_plot_fun.r',
sep='/'
)
script<-getURL(raw.fun, ssl.verifypeer = FALSE)
eval(parse(text = script))
raw.fun
script
script<-getURL(raw.fun, ssl.verifypeer = FALSE)
script
plot(mod1)
plot(mod1,nid=F)
mod1
plot(mod1)
plot(mod1,nid=F)
plot(mod1)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/functions.R')
plot_mail_nnet()
plot_mail_nnet <- function(){
mailset <- read.csv('mailset.csv')
set.seed(nrow(mailset))
mailset <- mailset[sample(nrow(mailset)),]
la <- mailset[,90]
l <- numeric()
for(i in 1:length(la)){if(la[i] == 'Spam')l[i] <- 1 else l[i] <- 0}
mod1 <- nnet(mailset[,3:89],l,size=10,linout = T)
require(RCurl)
root.url<-'https://gist.github.com/fawda123'
raw.fun<-paste(
root.url,
'5086859/raw/17fd6d2adec4dbcf5ce750cbd1f3e0f4be9d8b19/nnet_plot_fun.r',
sep='/'
)
script<-getURL(raw.fun, ssl.verifypeer = FALSE)
eval(parse(text = script))
rm('script','raw.fun')
par(mar=numeric(4),mfrow=c(1,2),family='serif')
plot(mod1,nid=F)
plot(mod1)
}
plot_mail_nnet()
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/functions.R')
plot_mail_nnet()
setwd("C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/spamset/spam")
dir_list <- dir()
len <- length(dir_list)
con <- file(dir_list[5],"r")
file<-readLines(con)
file <- paste(file, collapse = "")
file
source('~/.active-rstudio-document')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
word_count(str)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
source('~/.active-rstudio-document')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
special_character_count(str)
gregexpr("[/ * ? , @ ^ & ! # $ % ^ \\]",str,TRUE)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
special_character_count(str)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
special_character_count(str)
source('~/.active-rstudio-document')
special_character_count(str)
source('~/.active-rstudio-document')
special_character_count(str)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
special_character_count(str)
gregexpr("[/*?,@^&!#$%^\\-_]",str,TRUE)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
gregexpr("[/*?,@^&!#$%^\\-_]",str,TRUE)
special_character_count(str)
word_count(str)
file
gregexpr("[[ . ]]",str,TRUE)
gregexpr("[[ . ]]",str,TRUE)
gregexpr(" . ",str,TRUE)
gregexpr(" \. ",str,TRUE)
gregexpr(" /. ",str,TRUE)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
special_character_count(str)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
special_character_count(str)
gregexpr("[/*?,@^&!#$%^\\-_:;/.]",str,TRUE)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
gregexpr("[/*?,@^&!#$%^\\-_:;/.]",str,TRUE)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
special_character_count(str)
gregexpr("[-]",str,TRUE)
gregexpr("[/]",str,TRUE)
gregexpr("[*]",str,TRUE)
gregexpr("[?]",str,TRUE)
gregexpr("[,]",str,TRUE)
gregexpr("[@]",str,TRUE)
gregexpr("[^]",str,TRUE)
gregexpr("[\^]",str,TRUE)
gregexpr("[/^]",str,TRUE)
gregexpr("[/]",str,TRUE)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
special_character_count(str)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
special_character_count(str)
word_count(str)
digit_count(str)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
digit_count(str)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
space_count(str)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
space_count(str)
space_count <- function(str){
g <- gregexpr("[[:print:]]",str,TRUE)
count <- length(attr(g[[1]],'match.length'))
print(count)
}
space_count(str)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
upper_count(str)
str
gregexpr("[[:upper:]]",str,TRUE)
abc <- a:z
a
z
gregexpr("[a]",str,TRUE)
gregexpr("[[a]]",str,TRUE)
gregexpr("[a]",str,TRUE)
gregexpr("[a]",str,TRUE)
abc <- c(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,0,1,2,3,4,5,6,7,8,9)
abc <- c(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,0,1,2,3,4,5,6,7,8,'9')
abc <- c('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9')
abc
for ( i in 1:length(abc)){abc_b[i] <- paste('[',abc[i],']')}
abc_d <- as.character
for ( i in 1:length(abc)){abc_b[i] <- paste('[',abc[i],']')}
abc_d <- as.character(length(abc))
for ( i in 1:length(abc)){abc_b[i] <- paste('[',abc[i],']')}
abc_d
length(abc)
abc_d <- character
for ( i in 1:length(abc)){abc_b[i] <- paste('[',abc[i],']')}
abc_d <- character(36)
for ( i in 1:length(abc)){abc_b[i] <- paste('[',abc[i],']')}
paste("[", abc[1], "]")
paste("[",abc[1],"]")
paste("[",abc[1],"]",sep = "")
for ( i in 1:length(abc)){
abc_b[i] <- paste("[",abc[1],"]",sep = "")
}
for ( i in 1:length(abc)){
abc_b[i] <- paste("[",abc[1],"]",sep = "")
}
for ( i in 1:length(abc)){
abc_d[i] <- paste("[",abc[1],"]",sep = "")
}
abc_d
for ( i in 1:length(abc)){
abc_d[i] <- paste("[",abc[i],"]",sep = "")
}
abc_d
gregexpr(abc_d[i],str,TRUE)
gregexpr(abc_d[1],str,TRUE)
gregexpr(abc_d[26],str,TRUE)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
abc_d <- character(36)
alpha_details(str)
source('~/.active-rstudio-document')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
upper_count(str)
word_count(str)
gregexpr("[[:alnum:]]+",str,TRUE)
length(attr(g[[1]],'match.length'))
g <- gregexpr("[[:alnum:]]+",str,TRUE)
length(attr(g[[1]],'match.length'))
attr(g[[1]],'match.length')
sum(attr(g[[1]],'match.length'))
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
avg_word_length(str)
source('~/.active-rstudio-document')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
list
spam <- function(){
setwd("C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/spamset/spam")
list <- c('word_count','avg_word_length','spl_char_count','digit_count','space_count','char_count','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9','label')
dir_list <- dir()
len <- length(dir_list)
base <- data.frame(matrix(0, ncol = (length(list)), nrow = len))
names(base) <- list
for(i in 1:len){
con <- file(dir_list[i],"r")
str <-readLines(con)
str <- paste(file, collapse = "")
g <- gregexpr("[[:alnum:]]+",str,TRUE)
base[i,1] <- length(attr(g[[1]],'match.length'))
g <- gregexpr("[[:alnum:]]+",str,TRUE)
s <- sum(attr(g[[1]],'match.length'))
base[i,2] <- s/base[i,1]
g <- gregexpr("[[:punct:]]",str,TRUE)
base[i,3] <- length(attr(g[[1]],'match.length'))
g <- gregexpr("[[:digit:]]",str,TRUE)
base[i,4] <- length(attr(g[[1]],'match.length'))
g <- gregexpr("[[:blank:]]",str,TRUE)
base[i,5] <- length(attr(g[[1]],'match.length'))
g <- gregexpr("[[:print:]]",str,TRUE)
base[i,6] <- length(attr(g[[1]],'match.length'))
abc <- c('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9')
abc_d <- character(36)
for ( j in 7:42){
abc_d[i] <- paste("[",abc[i],"]",sep = "")
g <- gregexpr(abc_d[i],str,TRUE)
base[i,j] <- length(attr(g[[1]],'match.length'))
}
base[i,43] <- "Spam"
close(con)
print(base[i,])
}
write.csv(base, file = "spam.csv")
}
spam()
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
upper_count(str)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
upper_count(str)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
upper_count(str)
gregexpr(" [[:alnum:]]{1,3} ",str,TRUE)
gregexpr(" [[:alnum:]]{1,3} ","Hi what are you doing to me now",TRUE)
gregexpr(" [[:alnum:]]{1,3} ","Hi what are you doing to me now ",TRUE)
gregexpr(" [[:alnum:]]{1,3}","Hi what are you doing to me now ",TRUE)
gregexpr(" [[:alnum:]]{1,2}","Hi what are you doing to me now ",TRUE)
gregexpr(" ^[a-zA-Z]{1,2}$","Hi what are you doing to me now ",TRUE)
gregexpr(" ^[:alnum:]{1,2}$","Hi what are you doing to me now ",TRUE)
gregexpr(" [:alnum:]{1,2}","Hi what are you doing to me now ",TRUE)
g <- gregexpr("[[:alnum:]]+",str,TRUE)
attr(g[[1]],'match.length')
u <- attr(g[[1]],'match.length')
u
u[<2]
u[2<2]
u[u<2]
u[u42]
u[u<2]
u[u<4]
length(u[u<4])
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
u[u<2]
spam()
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
spam()
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/functions.R')
rm(predict)
predict_mail_nnet()
predict_mail()
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions_2.R')
predict_mail()
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions_2.R')
spam()
ham()
s <- read.csv('spam_1.csv')
getwd()
setwd("C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project")
s <- read.csv('spam_1.csv')
dir()
s <- read.csv('spam_2.csv')
h <- read.csv('ham_2.csv')
h <- read.csv('ham_2.csv')
base <- rbind(h,s)
base
write.csv(base,'mailset_2.csv')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions_2.R')
predict_mail()
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions_2.R')
predict_mail()
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions_2.R')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions_2.R')
predict_mail()
base
base[3:46]
colnames(base)
base[3:46,]
predict_mail()
mailset <- read.csv('mailset_2.csv')
set.seed(nrow(mailset))
mailset
mailset <- mailset[sample(nrow(mailset)),]
mailset
colnames(mailset)
colnames(mailset)
mailset[3:47,]
colnames(mailset[3:47,])
n <- mailset[3:47,]
colnames(n)
n <- mailset[,3:47]
colnames(n)
mailset <- n
mailset
colnames(mailset)
set.seed(nrow(mailset))
mailset <- mailset[sample(nrow(mailset)),]
split <- floor(nrow(mailset)/2)
mailTrain <- mailset[0:split,]
mailTest <- mailset[(split+1):nrow(mailset),]
cylModel <- multinom(label~., data = mailTrain, maxit=100, trace=T)
mostImportantVariables <- varImp(cylModel)
mostImportantVariables$Variables <- row.names(mostImportantVariables)
mostImportantVariables <- mostImportantVnariables[order(-mostImportantVariables$Overall),]
print(head(mostImportantVariables))
preds1 <- predict(cylModel, type="probs", newdata=mailTest)
preds2 <- predict(cylModel, type="class", newdata=mailTest)
print(postResample(mailTest$label,preds2))
head(preds2)
head(preds1)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions_2.R')
n <- mailset[,3:47]
predict_mail()
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions_2.R')
predict_mail()
getwd()
d <- "C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/test"
d
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions.R')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions_2.R')
setwd("C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/test")
list <- c('word_count','avg_word_length','spl_char_count','digit_count','space_count','char_count','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9','small_word_count','large_word_count','label')
dir_list <- dir()
len <- length(dir_list)
base <- data.frame(matrix(0, ncol = (length(list)), nrow = len))
names(base) <- list
for(i in 1:len){
con <- file(dir_list[i],"r")
str <-readLines(con)
str <- paste(str, collapse = "")
g <- gregexpr("[[:alnum:]]+",str,TRUE)
base[i,1] <- length(attr(g[[1]],'match.length'))
u <- attr(g[[1]],'match.length')
base[i,43] <- length(u[u<4])
base[i,44] <- length(u[u>8])
g <- gregexpr("[[:alnum:]]+",str,TRUE)
s <- sum(attr(g[[1]],'match.length'))
base[i,2] <- s/base[i,1]
g <- gregexpr("[[:punct:]]",str,TRUE)
base[i,3] <- length(attr(g[[1]],'match.length'))
g <- gregexpr("[[:digit:]]",str,TRUE)
base[i,4] <- length(attr(g[[1]],'match.length'))
g <- gregexpr("[[:blank:]]",str,TRUE)
base[i,5] <- length(attr(g[[1]],'match.length'))
g <- gregexpr("[[:print:]]",str,TRUE)
base[i,6] <- length(attr(g[[1]],'match.length'))
abc <- c('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9')
abc_d <- character(36)
for ( j in 7:42){
abc_d[i] <- paste("[",abc[j-6],"]",sep = "")
g <- gregexpr(abc_d[i],str,TRUE)
base[i,j] <- length(attr(g[[1]],'match.length'))
}
base[i,45] <- "Ham"
close(con)
print(base[i,])
}
write.csv(base, file = "ham_2.csv")
library(caret)
library(nnet)
library(ggplot2)
library(lattice)
setwd("C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project")
mailset <- read.csv('mailset_2.csv')
mailset <- mailset[,3:47]
set.seed(nrow(mailset))
mailset <- mailset[sample(nrow(mailset)),]
split <- floor(nrow(mailset)/2)
mailTrain <- mailset[0:split,]
mailTest <- read.csv('test.csv')
cylModel <- multinom(label~., data = mailTrain, maxit=100, trace=T)
mostImportantVariables <- varImp(cylModel)
mostImportantVariables$Variables <- row.names(mostImportantVariables)
mostImportantVariables <- mostImportantVariables[order(-mostImportantVariables$Overall),]
print(head(mostImportantVariables))
preds1 <- predict(cylModel, type="probs", newdata=mailTest)
preds2 <- predict(cylModel, type="class", newdata=mailTest)
print(postResample(mailTest$label,preds2))
head(preds2)
head(preds1)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions_2.R')
spam()
ham()
a <- read.csv('spam_final.csv')
setwd("C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project")
a <- read.csv('spam_final.csv')
b <- read.csv('ham_final.csv')
base <- rbind(a,b)
write.csv(base,'mailset_final.csv')
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions_2.R')
predict_mail()
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions_2.R')
predict_mail()
mailset <- read.csv('mailset_final.csv')
nrow(mailset)
vehicles <- mailset
vehicles
totalAccuracy <- c()
cv <- 10
cvDivider <- floor(nrow(vehicles) / (cv+1))
for (cv in seq(1:cv)) {
# assign chunk to data test
dataTestIndex <- c((cv * cvDivider):(cv * cvDivider + cvDivider))
dataTest <- vehicles[dataTestIndex,]
# everything else to train
dataTrain <- vehicles[-dataTestIndex,]
cylModel <- multinom(cylinders~., data=dataTrain, maxit=50, trace=T)
pred <- predict(cylModel, newdata=dataTest, type="class")
#  classification error
cv_ac <- postResample(dataTest$cylinders, pred)[[1]]
print(paste('Current Accuracy:',cv_ac,'for CV:',cv))
totalAccuracy <- c(totalAccuracy, cv_ac)
}
totalAccuracy <- c()
cv <- 10
cvDivider <- floor(nrow(vehicles) / (cv+1))
for (cv in seq(1:cv)) {
# assign chunk to data test
dataTestIndex <- c((cv * cvDivider):(cv * cvDivider + cvDivider))
dataTest <- vehicles[dataTestIndex,]
# everything else to train
dataTrain <- vehicles[-dataTestIndex,]
cylModel <- multinom(label~., data=dataTrain, maxit=50, trace=T)
pred <- predict(cylModel, newdata=dataTest, type="class")
#  classification error
cv_ac <- postResample(dataTest$label, pred)[[1]]
print(paste('Current Accuracy:',cv_ac,'for CV:',cv))
totalAccuracy <- c(totalAccuracy, cv_ac)
}
totalAccuracy <- c()
cv <- 10
cvDivider <- floor(nrow(vehicles) / (cv+1))
for (cv in seq(1:cv)) {
# assign chunk to data test
dataTestIndex <- c((cv * cvDivider):(cv * cvDivider + cvDivider))
dataTest <- vehicles[dataTestIndex,]
# everything else to train
dataTrain <- vehicles[-dataTestIndex,]
cylModel <- multinom(label~., data=dataTrain, maxit=500, trace=T)
pred <- predict(cylModel, newdata=dataTest, type="class")
#  classification error
cv_ac <- postResample(dataTest$label, pred)[[1]]
print(paste('Current Accuracy:',cv_ac,'for CV:',cv))
totalAccuracy <- c(totalAccuracy, cv_ac)
}
totalAccuracy
mean(totalAccuracy)
predict_mail()
totalAccuracy <- c()
cv <- 10
cvDivider <- floor(nrow(mailset) / (cv+1))
for (cv in seq(1:cv)) {
# assign chunk to data test
dataTestIndex <- c((cv * cvDivider):(cv * cvDivider + cvDivider))
dataTest <- vehicles[dataTestIndex,]
# everything else to train
dataTrain <- vehicles[-dataTestIndex,]
print(nrow(dataTrain))
cylModel <- multinom(label~., data=dataTrain, maxit=500, trace=T)
pred <- predict(cylModel, newdata=dataTest, type="class")
#  classification error
cv_ac <- postResample(dataTest$label, pred)[[1]]
print(paste('Current Accuracy:',cv_ac,'for CV:',cv))
totalAccuracy <- c(totalAccuracy, cv_ac)
}
totalAccuracy
mean(totalAccuracy)
source('C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project/upgrade_functions_2.R')
cycle_predict()
test
dir()
test <- read.csv('test.csv')
test
library(caret)
library(nnet)
library(ggplot2)
library(lattice)
setwd("C:/Users/sarav rajavelu/Sarav/My Study Material/Coursera/R_sandbox/mini_project/Mini Project")
mailset <- read.csv('mailset_final.csv')
mailset <- mailset[,3:47]
set.seed(nrow(mailset))
mailset <- mailset[sample(nrow(mailset)),]
split <- floor(nrow(mailset)/2)
mailTrain <- mailset
cylModel <- multinom(label~., data = mailTrain, maxit=1000, trace=T)
mostImportantVariables <- varImp(cylModel)
mostImportantVariables$Variables <- row.names(mostImportantVariables)
mostImportantVariables <- mostImportantVariables[order(-mostImportantVariables$Overall),]
print(head(mostImportantVariables))
nrow(mailTrain)
mailTest <- test
mailTest
preds1 <- predict(cylModel, type="probs", newdata=mailTest)
preds2 <- predict(cylModel, type="class", newdata=mailTest)
print(postResample(mailTest$label,preds2))
head(preds2)
head(preds1)
